<?php

namespace App\Livewire\FilamentJetstream\Profile;

use Filament\Actions\Action;
use Filament\Forms;
use Filament\Infolists\Components\TextEntry;
use Filament\Jetstream\Jetstream;
use Filament\Jetstream\Livewire\BaseLivewireComponent;
use Filament\Jetstream\Models\Team;
use Filament\Schemas\Components\Actions;
use Filament\Schemas\Components\Section;
use Filament\Schemas\Schema;
use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\Redirector;
use Illuminate\Support\Facades\DB;
use Illuminate\View\View;

/**
 * Delete Account Component
 *
 * This component handles permanent account deletion with:
 * - Password confirmation
 * - Team cleanup (if teams are enabled)
 * - Token revocation
 * - Profile photo deletion
 *
 * Customize this file to:
 * - Add additional cleanup logic
 * - Modify confirmation requirements
 * - Add custom pre-deletion checks
 * - Implement soft deletes instead of permanent deletion
 */
class DeleteAccount extends BaseLivewireComponent
{
    public function form(Schema $schema): Schema
    {
        // TODO: Customize delete account form
        return $schema
            ->schema([
                Section::make(__('filament-jetstream::default.delete_account.section.title'))
                    ->description(__('filament-jetstream::default.delete_account.section.description'))
                    ->aside()
                    ->schema([
                        TextEntry::make('deleteAccountNotice')
                            ->hiddenLabel()
                            ->state(fn () => __('filament-jetstream::default.delete_account.section.notice')),
                        Actions::make([
                            Action::make('deleteAccount')
                                ->label(__('filament-jetstream::default.action.delete_account.label'))
                                ->color('danger')
                                ->requiresConfirmation()
                                ->modalHeading(__('filament-jetstream::default.delete_account.section.title'))
                                ->modalDescription(__('filament-jetstream::default.action.delete_account.notice'))
                                ->modalSubmitActionLabel(__('filament-jetstream::default.action.delete_account.label'))
                                ->modalCancelAction(false)
                                ->schema([
                                    Forms\Components\TextInput::make('password')
                                        ->password()
                                        ->revealable()
                                        ->label(__('filament-jetstream::default.form.password.label'))
                                        ->required()
                                        ->currentPassword(),
                                    // TODO: Add additional confirmation fields
                                    // Example: require typing "DELETE" to confirm
                                ])
                                ->action(fn (array $data) => $this->deleteAccount())
                                ->successNotificationTitle(__('filament-jetstream::default.action.delete_account.success_title'))
                                ->successRedirectUrl(route('login')),
                        ]),
                    ]),
            ]);
    }

    /**
     * Delete the current user.
     *
     * TODO: Customize account deletion logic
     */
    public function deleteAccount(): Redirector | RedirectResponse
    {
        $user = filament()->auth()->user();

        // TODO: Add pre-deletion hooks or checks
        // Example: Check for pending orders, subscriptions, etc.

        DB::transaction(function () use ($user) {
            if (Jetstream::plugin()?->hasTeamsFeatures()) {
                $user->teams()->detach();

                $user->ownedTeams->each(function (Team $team) {
                    $team->delete();
                });
            }

            $user->deleteProfilePhoto();

            $user->tokens?->each->delete();

            // TODO: Add custom cleanup logic here
            // Example: Delete user posts, comments, files, etc.

            $user->delete();
        });

        filament()->auth()->logout();

        // TODO: Add post-deletion actions
        // Example: Send goodbye email, log activity, etc.

        return redirect(filament()->getLoginUrl());
    }

    public function render(): View
    {
        return view($this->getViewName('filament-jetstream::livewire.profile.delete-account'));
    }
}
